/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiProjectsGet } from '../fn/projects/api-projects-get';
import { ApiProjectsGet$Params } from '../fn/projects/api-projects-get';
import { apiProjectsIdDelete } from '../fn/projects/api-projects-id-delete';
import { ApiProjectsIdDelete$Params } from '../fn/projects/api-projects-id-delete';
import { apiProjectsIdGet } from '../fn/projects/api-projects-id-get';
import { ApiProjectsIdGet$Params } from '../fn/projects/api-projects-id-get';
import { apiProjectsIdPut } from '../fn/projects/api-projects-id-put';
import { ApiProjectsIdPut$Params } from '../fn/projects/api-projects-id-put';
import { apiProjectsPost } from '../fn/projects/api-projects-post';
import { ApiProjectsPost$Params } from '../fn/projects/api-projects-post';
import { Project } from '../models/project';

@Injectable({ providedIn: 'root' })
export class ProjectsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiProjectsGet()` */
  static readonly ApiProjectsGetPath = '/api/projects';

  /**
   * 取得所有專案列表.
   *
   * 取得所有專案的基本資訊（不包含詳細的欄位和任務資料）
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsGet$Response(params?: ApiProjectsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<{
'id'?: string;
'name'?: string;
'description'?: string;
'createdAt'?: string;
'columnsCount'?: number;
'tasksCount'?: number;
}>>> {
    return apiProjectsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * 取得所有專案列表.
   *
   * 取得所有專案的基本資訊（不包含詳細的欄位和任務資料）
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsGet(params?: ApiProjectsGet$Params, context?: HttpContext): Observable<Array<{
'id'?: string;
'name'?: string;
'description'?: string;
'createdAt'?: string;
'columnsCount'?: number;
'tasksCount'?: number;
}>> {
    return this.apiProjectsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<{
'id'?: string;
'name'?: string;
'description'?: string;
'createdAt'?: string;
'columnsCount'?: number;
'tasksCount'?: number;
}>>): Array<{
'id'?: string;
'name'?: string;
'description'?: string;
'createdAt'?: string;
'columnsCount'?: number;
'tasksCount'?: number;
}> => r.body)
    );
  }

  /** Path part for operation `apiProjectsPost()` */
  static readonly ApiProjectsPostPath = '/api/projects';

  /**
   * 建立新專案.
   *
   * 建立一個新的 Kanban 專案，會自動建立預設的三個欄位
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiProjectsPost$Response(params: ApiProjectsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiProjectsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * 建立新專案.
   *
   * 建立一個新的 Kanban 專案，會自動建立預設的三個欄位
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiProjectsPost(params: ApiProjectsPost$Params, context?: HttpContext): Observable<void> {
    return this.apiProjectsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiProjectsIdGet()` */
  static readonly ApiProjectsIdGetPath = '/api/projects/{id}';

  /**
   * 取得專案詳細資料.
   *
   * 根據專案 ID 取得專案的完整資料，包含所有欄位和任務
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsIdGet$Response(params: ApiProjectsIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Project>> {
    return apiProjectsIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * 取得專案詳細資料.
   *
   * 根據專案 ID 取得專案的完整資料，包含所有欄位和任務
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsIdGet(params: ApiProjectsIdGet$Params, context?: HttpContext): Observable<Project> {
    return this.apiProjectsIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Project>): Project => r.body)
    );
  }

  /** Path part for operation `apiProjectsIdPut()` */
  static readonly ApiProjectsIdPutPath = '/api/projects/{id}';

  /**
   * 更新專案資訊.
   *
   * 更新專案的名稱和描述
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiProjectsIdPut$Response(params: ApiProjectsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiProjectsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * 更新專案資訊.
   *
   * 更新專案的名稱和描述
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiProjectsIdPut(params: ApiProjectsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiProjectsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiProjectsIdDelete()` */
  static readonly ApiProjectsIdDeletePath = '/api/projects/{id}';

  /**
   * 刪除專案.
   *
   * 刪除指定的專案及其所有欄位和任務
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsIdDelete$Response(params: ApiProjectsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiProjectsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * 刪除專案.
   *
   * 刪除指定的專案及其所有欄位和任務
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsIdDelete(params: ApiProjectsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiProjectsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
