/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiProjectsGet$Json } from '../fn/project/api-projects-get-json';
import { ApiProjectsGet$Json$Params } from '../fn/project/api-projects-get-json';
import { apiProjectsGet$Plain } from '../fn/project/api-projects-get-plain';
import { ApiProjectsGet$Plain$Params } from '../fn/project/api-projects-get-plain';
import { apiProjectsIdDelete } from '../fn/project/api-projects-id-delete';
import { ApiProjectsIdDelete$Params } from '../fn/project/api-projects-id-delete';
import { apiProjectsIdGet$Json } from '../fn/project/api-projects-id-get-json';
import { ApiProjectsIdGet$Json$Params } from '../fn/project/api-projects-id-get-json';
import { apiProjectsIdGet$Plain } from '../fn/project/api-projects-id-get-plain';
import { ApiProjectsIdGet$Plain$Params } from '../fn/project/api-projects-id-get-plain';
import { apiProjectsIdPut } from '../fn/project/api-projects-id-put';
import { ApiProjectsIdPut$Params } from '../fn/project/api-projects-id-put';
import { apiProjectsPost$Json } from '../fn/project/api-projects-post-json';
import { ApiProjectsPost$Json$Params } from '../fn/project/api-projects-post-json';
import { apiProjectsPost$Plain } from '../fn/project/api-projects-post-plain';
import { ApiProjectsPost$Plain$Params } from '../fn/project/api-projects-post-plain';
import { Project } from '../models/project';

@Injectable({ providedIn: 'root' })
export class ProjectService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiProjectsGet()` */
  static readonly ApiProjectsGetPath = '/api/projects';

  /**
   * 獲取所有專案.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsGet$Plain$Response(params?: ApiProjectsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Project>>> {
    return apiProjectsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * 獲取所有專案.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsGet$Plain(params?: ApiProjectsGet$Plain$Params, context?: HttpContext): Observable<Array<Project>> {
    return this.apiProjectsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Project>>): Array<Project> => r.body)
    );
  }

  /**
   * 獲取所有專案.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsGet$Json$Response(params?: ApiProjectsGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Project>>> {
    return apiProjectsGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * 獲取所有專案.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsGet$Json(params?: ApiProjectsGet$Json$Params, context?: HttpContext): Observable<Array<Project>> {
    return this.apiProjectsGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Project>>): Array<Project> => r.body)
    );
  }

  /** Path part for operation `apiProjectsPost()` */
  static readonly ApiProjectsPostPath = '/api/projects';

  /**
   * 創建新專案.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProjectsPost$Plain$Response(params?: ApiProjectsPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Project>> {
    return apiProjectsPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * 創建新專案.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProjectsPost$Plain(params?: ApiProjectsPost$Plain$Params, context?: HttpContext): Observable<Project> {
    return this.apiProjectsPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Project>): Project => r.body)
    );
  }

  /**
   * 創建新專案.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProjectsPost$Json$Response(params?: ApiProjectsPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Project>> {
    return apiProjectsPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * 創建新專案.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProjectsPost$Json(params?: ApiProjectsPost$Json$Params, context?: HttpContext): Observable<Project> {
    return this.apiProjectsPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Project>): Project => r.body)
    );
  }

  /** Path part for operation `apiProjectsIdGet()` */
  static readonly ApiProjectsIdGetPath = '/api/projects/{id}';

  /**
   * 獲取指定的專案.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsIdGet$Plain$Response(params: ApiProjectsIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Project>> {
    return apiProjectsIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * 獲取指定的專案.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsIdGet$Plain(params: ApiProjectsIdGet$Plain$Params, context?: HttpContext): Observable<Project> {
    return this.apiProjectsIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Project>): Project => r.body)
    );
  }

  /**
   * 獲取指定的專案.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsIdGet$Json$Response(params: ApiProjectsIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Project>> {
    return apiProjectsIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * 獲取指定的專案.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsIdGet$Json(params: ApiProjectsIdGet$Json$Params, context?: HttpContext): Observable<Project> {
    return this.apiProjectsIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Project>): Project => r.body)
    );
  }

  /** Path part for operation `apiProjectsIdPut()` */
  static readonly ApiProjectsIdPutPath = '/api/projects/{id}';

  /**
   * 更新專案.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProjectsIdPut$Response(params: ApiProjectsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiProjectsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * 更新專案.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProjectsIdPut(params: ApiProjectsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiProjectsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiProjectsIdDelete()` */
  static readonly ApiProjectsIdDeletePath = '/api/projects/{id}';

  /**
   * 刪除專案.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsIdDelete$Response(params: ApiProjectsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiProjectsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * 刪除專案.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProjectsIdDelete(params: ApiProjectsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiProjectsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
