/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiColumnsIdDelete } from '../fn/column/api-columns-id-delete';
import { ApiColumnsIdDelete$Params } from '../fn/column/api-columns-id-delete';
import { apiColumnsIdGet$Json } from '../fn/column/api-columns-id-get-json';
import { ApiColumnsIdGet$Json$Params } from '../fn/column/api-columns-id-get-json';
import { apiColumnsIdGet$Plain } from '../fn/column/api-columns-id-get-plain';
import { ApiColumnsIdGet$Plain$Params } from '../fn/column/api-columns-id-get-plain';
import { apiColumnsIdPut } from '../fn/column/api-columns-id-put';
import { ApiColumnsIdPut$Params } from '../fn/column/api-columns-id-put';
import { apiColumnsProjectProjectIdGet$Json } from '../fn/column/api-columns-project-project-id-get-json';
import { ApiColumnsProjectProjectIdGet$Json$Params } from '../fn/column/api-columns-project-project-id-get-json';
import { apiColumnsProjectProjectIdGet$Plain } from '../fn/column/api-columns-project-project-id-get-plain';
import { ApiColumnsProjectProjectIdGet$Plain$Params } from '../fn/column/api-columns-project-project-id-get-plain';
import { apiProjectsProjectIdColumnsPost$Json } from '../fn/column/api-projects-project-id-columns-post-json';
import { ApiProjectsProjectIdColumnsPost$Json$Params } from '../fn/column/api-projects-project-id-columns-post-json';
import { apiProjectsProjectIdColumnsPost$Plain } from '../fn/column/api-projects-project-id-columns-post-plain';
import { ApiProjectsProjectIdColumnsPost$Plain$Params } from '../fn/column/api-projects-project-id-columns-post-plain';
import { apiProjectsProjectIdColumnsReorderPatch } from '../fn/column/api-projects-project-id-columns-reorder-patch';
import { ApiProjectsProjectIdColumnsReorderPatch$Params } from '../fn/column/api-projects-project-id-columns-reorder-patch';
import { Column } from '../models/column';

@Injectable({ providedIn: 'root' })
export class ColumnService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiColumnsProjectProjectIdGet()` */
  static readonly ApiColumnsProjectProjectIdGetPath = '/api/columns/project/{projectId}';

  /**
   * 獲取指定專案的所有欄位.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColumnsProjectProjectIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColumnsProjectProjectIdGet$Plain$Response(params: ApiColumnsProjectProjectIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Column>>> {
    return apiColumnsProjectProjectIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * 獲取指定專案的所有欄位.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColumnsProjectProjectIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColumnsProjectProjectIdGet$Plain(params: ApiColumnsProjectProjectIdGet$Plain$Params, context?: HttpContext): Observable<Array<Column>> {
    return this.apiColumnsProjectProjectIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Column>>): Array<Column> => r.body)
    );
  }

  /**
   * 獲取指定專案的所有欄位.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColumnsProjectProjectIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColumnsProjectProjectIdGet$Json$Response(params: ApiColumnsProjectProjectIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Column>>> {
    return apiColumnsProjectProjectIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * 獲取指定專案的所有欄位.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColumnsProjectProjectIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColumnsProjectProjectIdGet$Json(params: ApiColumnsProjectProjectIdGet$Json$Params, context?: HttpContext): Observable<Array<Column>> {
    return this.apiColumnsProjectProjectIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Column>>): Array<Column> => r.body)
    );
  }

  /** Path part for operation `apiColumnsIdGet()` */
  static readonly ApiColumnsIdGetPath = '/api/columns/{id}';

  /**
   * 獲取指定欄位的詳細資訊.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColumnsIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColumnsIdGet$Plain$Response(params: ApiColumnsIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Column>> {
    return apiColumnsIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * 獲取指定欄位的詳細資訊.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColumnsIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColumnsIdGet$Plain(params: ApiColumnsIdGet$Plain$Params, context?: HttpContext): Observable<Column> {
    return this.apiColumnsIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Column>): Column => r.body)
    );
  }

  /**
   * 獲取指定欄位的詳細資訊.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColumnsIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColumnsIdGet$Json$Response(params: ApiColumnsIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Column>> {
    return apiColumnsIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * 獲取指定欄位的詳細資訊.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColumnsIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColumnsIdGet$Json(params: ApiColumnsIdGet$Json$Params, context?: HttpContext): Observable<Column> {
    return this.apiColumnsIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Column>): Column => r.body)
    );
  }

  /** Path part for operation `apiColumnsIdPut()` */
  static readonly ApiColumnsIdPutPath = '/api/columns/{id}';

  /**
   * 更新欄位資訊.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColumnsIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiColumnsIdPut$Response(params: ApiColumnsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiColumnsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * 更新欄位資訊.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColumnsIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiColumnsIdPut(params: ApiColumnsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiColumnsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiColumnsIdDelete()` */
  static readonly ApiColumnsIdDeletePath = '/api/columns/{id}';

  /**
   * 刪除欄位.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColumnsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColumnsIdDelete$Response(params: ApiColumnsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiColumnsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * 刪除欄位.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColumnsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColumnsIdDelete(params: ApiColumnsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiColumnsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiProjectsProjectIdColumnsPost()` */
  static readonly ApiProjectsProjectIdColumnsPostPath = '/api/projects/{projectId}/columns';

  /**
   * 在專案中建立新欄位.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsProjectIdColumnsPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProjectsProjectIdColumnsPost$Plain$Response(params: ApiProjectsProjectIdColumnsPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Column>> {
    return apiProjectsProjectIdColumnsPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * 在專案中建立新欄位.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsProjectIdColumnsPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProjectsProjectIdColumnsPost$Plain(params: ApiProjectsProjectIdColumnsPost$Plain$Params, context?: HttpContext): Observable<Column> {
    return this.apiProjectsProjectIdColumnsPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Column>): Column => r.body)
    );
  }

  /**
   * 在專案中建立新欄位.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsProjectIdColumnsPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProjectsProjectIdColumnsPost$Json$Response(params: ApiProjectsProjectIdColumnsPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Column>> {
    return apiProjectsProjectIdColumnsPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * 在專案中建立新欄位.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsProjectIdColumnsPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProjectsProjectIdColumnsPost$Json(params: ApiProjectsProjectIdColumnsPost$Json$Params, context?: HttpContext): Observable<Column> {
    return this.apiProjectsProjectIdColumnsPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Column>): Column => r.body)
    );
  }

  /** Path part for operation `apiProjectsProjectIdColumnsReorderPatch()` */
  static readonly ApiProjectsProjectIdColumnsReorderPatchPath = '/api/projects/{projectId}/columns/reorder';

  /**
   * 重新排序專案中的欄位.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsProjectIdColumnsReorderPatch()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProjectsProjectIdColumnsReorderPatch$Response(params: ApiProjectsProjectIdColumnsReorderPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiProjectsProjectIdColumnsReorderPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * 重新排序專案中的欄位.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsProjectIdColumnsReorderPatch$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProjectsProjectIdColumnsReorderPatch(params: ApiProjectsProjectIdColumnsReorderPatch$Params, context?: HttpContext): Observable<void> {
    return this.apiProjectsProjectIdColumnsReorderPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
