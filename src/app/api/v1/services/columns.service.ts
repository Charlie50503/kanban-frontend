/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiColumnsIdDelete } from '../fn/columns/api-columns-id-delete';
import { ApiColumnsIdDelete$Params } from '../fn/columns/api-columns-id-delete';
import { apiColumnsIdPut } from '../fn/columns/api-columns-id-put';
import { ApiColumnsIdPut$Params } from '../fn/columns/api-columns-id-put';
import { apiProjectsProjectIdColumnsPost } from '../fn/columns/api-projects-project-id-columns-post';
import { ApiProjectsProjectIdColumnsPost$Params } from '../fn/columns/api-projects-project-id-columns-post';

@Injectable({ providedIn: 'root' })
export class ColumnsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiProjectsProjectIdColumnsPost()` */
  static readonly ApiProjectsProjectIdColumnsPostPath = '/api/projects/{projectId}/columns';

  /**
   * 在專案中建立新欄位.
   *
   * 為指定專案建立新的看板欄位
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsProjectIdColumnsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiProjectsProjectIdColumnsPost$Response(params: ApiProjectsProjectIdColumnsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiProjectsProjectIdColumnsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * 在專案中建立新欄位.
   *
   * 為指定專案建立新的看板欄位
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsProjectIdColumnsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiProjectsProjectIdColumnsPost(params: ApiProjectsProjectIdColumnsPost$Params, context?: HttpContext): Observable<void> {
    return this.apiProjectsProjectIdColumnsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiColumnsIdPut()` */
  static readonly ApiColumnsIdPutPath = '/api/columns/{id}';

  /**
   * 更新欄位資訊.
   *
   * 更新欄位的標題和顏色
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColumnsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiColumnsIdPut$Response(params: ApiColumnsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiColumnsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * 更新欄位資訊.
   *
   * 更新欄位的標題和顏色
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColumnsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiColumnsIdPut(params: ApiColumnsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiColumnsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiColumnsIdDelete()` */
  static readonly ApiColumnsIdDeletePath = '/api/columns/{id}';

  /**
   * 刪除欄位.
   *
   * 刪除指定欄位及其所有任務
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColumnsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColumnsIdDelete$Response(params: ApiColumnsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiColumnsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * 刪除欄位.
   *
   * 刪除指定欄位及其所有任務
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColumnsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiColumnsIdDelete(params: ApiColumnsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiColumnsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
