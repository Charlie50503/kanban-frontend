/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiColumnsColumnIdTasksReorderPatch } from '../fn/tasks/api-columns-column-id-tasks-reorder-patch';
import { ApiColumnsColumnIdTasksReorderPatch$Params } from '../fn/tasks/api-columns-column-id-tasks-reorder-patch';
import { apiProjectsProjectIdColumnsColumnIdTasksPost } from '../fn/tasks/api-projects-project-id-columns-column-id-tasks-post';
import { ApiProjectsProjectIdColumnsColumnIdTasksPost$Params } from '../fn/tasks/api-projects-project-id-columns-column-id-tasks-post';
import { apiTasksIdDelete } from '../fn/tasks/api-tasks-id-delete';
import { ApiTasksIdDelete$Params } from '../fn/tasks/api-tasks-id-delete';
import { apiTasksIdMovePatch } from '../fn/tasks/api-tasks-id-move-patch';
import { ApiTasksIdMovePatch$Params } from '../fn/tasks/api-tasks-id-move-patch';
import { apiTasksIdPut } from '../fn/tasks/api-tasks-id-put';
import { ApiTasksIdPut$Params } from '../fn/tasks/api-tasks-id-put';

@Injectable({ providedIn: 'root' })
export class TasksService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiProjectsProjectIdColumnsColumnIdTasksPost()` */
  static readonly ApiProjectsProjectIdColumnsColumnIdTasksPostPath = '/api/projects/{projectId}/columns/{columnId}/tasks';

  /**
   * 在欄位中建立新任務.
   *
   * 為指定欄位建立新任務
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProjectsProjectIdColumnsColumnIdTasksPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiProjectsProjectIdColumnsColumnIdTasksPost$Response(params: ApiProjectsProjectIdColumnsColumnIdTasksPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiProjectsProjectIdColumnsColumnIdTasksPost(this.http, this.rootUrl, params, context);
  }

  /**
   * 在欄位中建立新任務.
   *
   * 為指定欄位建立新任務
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProjectsProjectIdColumnsColumnIdTasksPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiProjectsProjectIdColumnsColumnIdTasksPost(params: ApiProjectsProjectIdColumnsColumnIdTasksPost$Params, context?: HttpContext): Observable<void> {
    return this.apiProjectsProjectIdColumnsColumnIdTasksPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTasksIdPut()` */
  static readonly ApiTasksIdPutPath = '/api/tasks/{id}';

  /**
   * 更新任務資訊.
   *
   * 更新任務的所有欄位資訊
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTasksIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiTasksIdPut$Response(params: ApiTasksIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTasksIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * 更新任務資訊.
   *
   * 更新任務的所有欄位資訊
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTasksIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiTasksIdPut(params: ApiTasksIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiTasksIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTasksIdDelete()` */
  static readonly ApiTasksIdDeletePath = '/api/tasks/{id}';

  /**
   * 刪除任務.
   *
   * 刪除指定的任務
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTasksIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTasksIdDelete$Response(params: ApiTasksIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTasksIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * 刪除任務.
   *
   * 刪除指定的任務
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTasksIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTasksIdDelete(params: ApiTasksIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiTasksIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiTasksIdMovePatch()` */
  static readonly ApiTasksIdMovePatchPath = '/api/tasks/{id}/move';

  /**
   * 移動任務到不同欄位.
   *
   * 將任務從一個欄位移動到另一個欄位
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTasksIdMovePatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiTasksIdMovePatch$Response(params: ApiTasksIdMovePatch$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiTasksIdMovePatch(this.http, this.rootUrl, params, context);
  }

  /**
   * 移動任務到不同欄位.
   *
   * 將任務從一個欄位移動到另一個欄位
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTasksIdMovePatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiTasksIdMovePatch(params: ApiTasksIdMovePatch$Params, context?: HttpContext): Observable<void> {
    return this.apiTasksIdMovePatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiColumnsColumnIdTasksReorderPatch()` */
  static readonly ApiColumnsColumnIdTasksReorderPatchPath = '/api/columns/{columnId}/tasks/reorder';

  /**
   * 重新排序欄位內的任務.
   *
   * 調整同一欄位內任務的順序
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiColumnsColumnIdTasksReorderPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiColumnsColumnIdTasksReorderPatch$Response(params: ApiColumnsColumnIdTasksReorderPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiColumnsColumnIdTasksReorderPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * 重新排序欄位內的任務.
   *
   * 調整同一欄位內任務的順序
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiColumnsColumnIdTasksReorderPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiColumnsColumnIdTasksReorderPatch(params: ApiColumnsColumnIdTasksReorderPatch$Params, context?: HttpContext): Observable<void> {
    return this.apiColumnsColumnIdTasksReorderPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
